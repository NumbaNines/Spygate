#!/usr/bin/env python3\n\"\"\"\nTest the triangle detection fix for Clip 6.\nVerify that YOLO detects triangles and the system properly analyzes their direction.\n\"\"\"\n\nimport os\nimport sys\nimport cv2\nimport numpy as np\nimport logging\nfrom pathlib import Path\n\n# Add project root to path\nproject_root = Path(__file__).parent\nsys.path.insert(0, str(project_root))\n\nprint(\"üöÄ Starting triangle detection test...\")\n\ntry:\n    from src.spygate.ml.enhanced_game_analyzer import EnhancedGameAnalyzer\n    print(\"‚úÖ Successfully imported EnhancedGameAnalyzer\")\nexcept Exception as e:\n    print(f\"‚ùå Failed to import EnhancedGameAnalyzer: {e}\")\n    sys.exit(1)\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\nlogger = logging.getLogger(__name__)\n\ndef test_clip6_triangle_detection():\n    \"\"\"Test triangle detection specifically for Clip 6 (Possession Change).\"\"\"\n    \n    print(\"üîç Testing Triangle Detection Fix for Clip 6\")\n    print(\"=\" * 50)\n    \n    # Initialize analyzer\n    print(\"üîß Initializing analyzer...\")\n    try:\n        analyzer = EnhancedGameAnalyzer()\n        print(\"‚úÖ Analyzer initialized successfully\")\n    except Exception as e:\n        print(f\"‚ùå Failed to initialize analyzer: {e}\")\n        return\n    \n    # Load the video\n    video_path = \"1 min 30 test clip.mp4\"\n    print(f\"üìπ Checking video file: {video_path}\")\n    \n    if not os.path.exists(video_path):\n        print(f\"‚ùå Video file not found: {video_path}\")\n        return\n    \n    print(f\"‚úÖ Video file found: {os.path.getsize(video_path)} bytes\")\n    \n    try:\n        cap = cv2.VideoCapture(video_path)\n        fps = cap.get(cv2.CAP_PROP_FPS)\n        print(f\"‚úÖ Video opened successfully, FPS: {fps}\")\n    except Exception as e:\n        print(f\"‚ùå Failed to open video: {e}\")\n        return\n    \n    # Clip 6: Possession Change (55.0-58.0s)\n    start_time = 55.0\n    end_time = 58.0\n    \n    start_frame = int(start_time * fps)\n    end_frame = int(end_time * fps)\n    \n    print(f\"üìπ Analyzing Clip 6: {start_time}s - {end_time}s\")\n    print(f\"üé¨ Frames: {start_frame} - {end_frame} (FPS: {fps})\")\n    print()\n    \n    # Test just one frame first\n    test_frame = start_frame + 30\n    \n    print(f\"üîç Testing Frame: {test_frame} ({test_frame/fps:.1f}s)\")\n    print(\"-\" * 40)\n    \n    # Seek to frame\n    cap.set(cv2.CAP_PROP_POS_FRAMES, test_frame)\n    ret, frame = cap.read()\n    \n    if not ret:\n        print(f\"‚ùå Could not read frame {test_frame}\")\n        cap.release()\n        return\n    \n    print(f\"‚úÖ Frame read successfully: {frame.shape}\")\n    \n    # Analyze frame\n    print(\"üß† Analyzing frame...\")\n    try:\n        game_state = analyzer.analyze_frame(frame)\n        print(\"‚úÖ Frame analysis completed\")\n    except Exception as e:\n        print(f\"‚ùå Frame analysis failed: {e}\")\n        import traceback\n        traceback.print_exc()\n        cap.release()\n        return\n    \n    # Check what was detected\n    print(f\"üìä Detection Results:\")\n    print(f\"   Possession Team: {game_state.possession_team}\")\n    print(f\"   Territory: {game_state.territory}\")\n    print(f\"   Down & Distance: {game_state.down} & {game_state.distance}\")\n    print(f\"   Confidence: {game_state.confidence:.3f}\")\n    \n    # Check if game_state dict was populated for hybrid logic\n    if hasattr(analyzer, 'game_state'):\n        print(f\"\\nüß† Hybrid Logic Data Available:\")\n        print(f\"   Game State Keys: {list(analyzer.game_state.keys())}\")\n        if 'possession' in analyzer.game_state:\n            print(f\"   Possession Data: {analyzer.game_state['possession']}\")\n        if 'territory' in analyzer.game_state:\n            print(f\"   Territory Data: {analyzer.game_state['territory']}\")\n    else:\n        print(f\"\\n‚ùå No hybrid logic data available\")\n    \n    cap.release()\n    \n    print(\"\\n‚úÖ Triangle detection test completed!\")\n    print()\n    print(\"üéØ Expected Results:\")\n    print(\"   - YOLO should detect possession_triangle_area and territory_triangle_area\")\n    print(\"   - System should analyze triangle directions (LEFT/RIGHT, UP/DOWN)\")\n    print(\"   - Possession team should be determined from triangle direction\")\n    print(\"   - Territory context should be determined from triangle direction\")\n    print(\"   - Hybrid logic data should be available for OCR validation\")\n\nif __name__ == \"__main__\":\n    try:\n        test_clip6_triangle_detection()\n    except Exception as e:\n        print(f\"‚ùå Test failed with exception: {e}\")\n        import traceback\n        traceback.print_exc()
