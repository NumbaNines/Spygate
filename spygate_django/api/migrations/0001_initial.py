# Generated by Django 5.2.2 on 2025-06-09 16:40

import uuid

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="SituationalClip",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("start_time", models.FloatField(help_text="Start time in seconds")),
                ("end_time", models.FloatField(help_text="End time in seconds")),
                ("clip_file", models.FileField(blank=True, null=True, upload_to="clips/%Y/%m/%d/")),
                (
                    "down",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(4),
                        ],
                    ),
                ),
                ("distance", models.PositiveIntegerField(blank=True, null=True)),
                ("yard_line", models.CharField(blank=True, max_length=20, null=True)),
                ("score_differential", models.IntegerField(blank=True, null=True)),
                ("time_remaining", models.CharField(blank=True, max_length=10, null=True)),
                (
                    "situation_type",
                    models.CharField(
                        choices=[
                            ("third_and_long", "Third & Long"),
                            ("third_and_short", "Third & Short"),
                            ("fourth_down", "Fourth Down"),
                            ("red_zone", "Red Zone"),
                            ("goal_line", "Goal Line"),
                            ("two_minute_warning", "Two-Minute Warning"),
                            ("close_game", "Close Game"),
                            ("no_huddle_offense", "No Huddle"),
                            ("commercial_break", "Commercial Break"),
                            ("turnover_interception", "Interception"),
                            ("turnover_fumble", "Fumble"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "performance_tier",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("clutch_play", "Clutch Play (95-100 pts)"),
                            ("big_play", "Big Play (85-94 pts)"),
                            ("good_play", "Good Play (75-84 pts)"),
                            ("average_play", "Average Play (60-74 pts)"),
                            ("poor_play", "Poor Play (40-59 pts)"),
                            ("turnover_play", "Turnover Play (0-39 pts)"),
                            ("defensive_stand", "Defensive Stand (0-20 pts)"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "performance_score",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(100.0),
                        ],
                    ),
                ),
                ("yards_gained", models.IntegerField(blank=True, null=True)),
                (
                    "professional_success_rate",
                    models.FloatField(
                        blank=True, help_text="Pro success rate for this situation", null=True
                    ),
                ),
                (
                    "user_vs_pro_comparison",
                    models.JSONField(
                        default=dict, help_text="User performance vs professional benchmarks"
                    ),
                ),
                ("user_tagged", models.BooleanField(default=False)),
                ("user_tags", models.JSONField(default=list, help_text="User-applied tags")),
                ("bookmarked", models.BooleanField(default=False)),
                ("notes", models.TextField(blank=True, null=True)),
                (
                    "transferable_to_games",
                    models.JSONField(default=list, help_text="Games this strategy transfers to"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "ordering": ["video_analysis", "start_time"],
            },
        ),
        migrations.CreateModel(
            name="SpygateUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(blank=True, null=True, verbose_name="last login"),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={"unique": "A user with that username already exists."},
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(blank=True, max_length=150, verbose_name="first name"),
                ),
                (
                    "last_name",
                    models.CharField(blank=True, max_length=150, verbose_name="last name"),
                ),
                (
                    "email",
                    models.EmailField(blank=True, max_length=254, verbose_name="email address"),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "mcs_username",
                    models.CharField(
                        blank=True, help_text="MCS Competitor Username", max_length=50, null=True
                    ),
                ),
                (
                    "players_lounge_username",
                    models.CharField(
                        blank=True, help_text="Players Lounge Username", max_length=50, null=True
                    ),
                ),
                (
                    "skill_level",
                    models.CharField(
                        choices=[
                            ("casual", "Casual Player"),
                            ("competitive", "Competitive Player"),
                            ("mcs_grinder", "MCS Grinder"),
                            ("mcs_pro", "MCS Professional"),
                        ],
                        default="casual",
                        max_length=20,
                    ),
                ),
                (
                    "primary_game",
                    models.CharField(
                        choices=[
                            ("madden_25", "Madden NFL 25"),
                            ("cfb_25", "College Football 25"),
                            ("madden_26", "Madden NFL 26"),
                            ("cfb_26", "College Football 26"),
                        ],
                        default="madden_25",
                        max_length=20,
                    ),
                ),
                (
                    "hardware_tier",
                    models.CharField(
                        choices=[
                            ("ultra_low", "Ultra Low"),
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("ultra", "Ultra"),
                        ],
                        default="medium",
                        max_length=20,
                    ),
                ),
                ("enable_cross_game_intelligence", models.BooleanField(default=True)),
                ("enable_professional_benchmarking", models.BooleanField(default=True)),
                ("total_videos_analyzed", models.PositiveIntegerField(default=0)),
                ("total_strategies_created", models.PositiveIntegerField(default=0)),
                ("total_gameplans_shared", models.PositiveIntegerField(default=0)),
                (
                    "subscription_tier",
                    models.CharField(
                        choices=[
                            ("free", "Free Tier"),
                            ("premium", "Premium ($19.99/month)"),
                            ("professional", "Professional ($39.99/month)"),
                        ],
                        default="free",
                        max_length=20,
                    ),
                ),
                ("subscription_expires", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="APIUsageLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("endpoint", models.CharField(max_length=200)),
                ("method", models.CharField(max_length=10)),
                ("ip_address", models.GenericIPAddressField()),
                ("user_agent", models.TextField(blank=True, null=True)),
                ("processing_time", models.FloatField(help_text="Processing time in seconds")),
                ("memory_usage_mb", models.FloatField(blank=True, null=True)),
                (
                    "video_duration",
                    models.FloatField(
                        blank=True, help_text="Duration of processed video", null=True
                    ),
                ),
                ("status_code", models.PositiveIntegerField()),
                ("response_size_bytes", models.PositiveIntegerField(blank=True, null=True)),
                ("error_message", models.TextField(blank=True, null=True)),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="api_usage",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="GamePlan",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "primary_game",
                    models.CharField(
                        choices=[
                            ("madden_25", "Madden NFL 25"),
                            ("cfb_25", "College Football 25"),
                            ("madden_26", "Madden NFL 26"),
                            ("cfb_26", "College Football 26"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "compatible_games",
                    models.JSONField(
                        default=list, help_text="Games this gameplan is compatible with"
                    ),
                ),
                ("opponent_username", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "opponent_analysis",
                    models.JSONField(default=dict, help_text="Opponent tendencies and patterns"),
                ),
                (
                    "custom_strategies",
                    models.JSONField(default=dict, help_text="Custom strategy definitions"),
                ),
                (
                    "cross_game_adaptations",
                    models.JSONField(default=dict, help_text="Game-specific adaptations"),
                ),
                ("times_used", models.PositiveIntegerField(default=0)),
                ("success_rate", models.FloatField(blank=True, null=True)),
                ("last_used", models.DateTimeField(blank=True, null=True)),
                ("is_public", models.BooleanField(default=False)),
                ("shared_count", models.PositiveIntegerField(default=0)),
                ("likes_count", models.PositiveIntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="gameplans",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "situations_covered",
                    models.ManyToManyField(blank=True, to="api.situationalclip"),
                ),
            ],
            options={
                "ordering": ["-updated_at"],
            },
        ),
        migrations.CreateModel(
            name="CommunityStrategy",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "primary_game",
                    models.CharField(
                        choices=[
                            ("madden_25", "Madden NFL 25"),
                            ("cfb_25", "College Football 25"),
                            ("madden_26", "Madden NFL 26"),
                            ("cfb_26", "College Football 26"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "source_pro_player",
                    models.CharField(
                        blank=True,
                        help_text="Professional player who used this",
                        max_length=100,
                        null=True,
                    ),
                ),
                ("pro_tournament_context", models.CharField(blank=True, max_length=200, null=True)),
                (
                    "effectiveness_rating",
                    models.FloatField(
                        help_text="Community effectiveness rating (0-5 stars)",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(5.0),
                        ],
                    ),
                ),
                ("strategy_data", models.JSONField(help_text="Detailed strategy implementation")),
                (
                    "cross_game_implementations",
                    models.JSONField(default=dict, help_text="Implementations across games"),
                ),
                ("views_count", models.PositiveIntegerField(default=0)),
                ("likes_count", models.PositiveIntegerField(default=0)),
                ("downloads_count", models.PositiveIntegerField(default=0)),
                ("comments_count", models.PositiveIntegerField(default=0)),
                (
                    "is_verified",
                    models.BooleanField(
                        default=False, help_text="Verified by professional players"
                    ),
                ),
                ("is_featured", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "creator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="shared_strategies",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ("supporting_clips", models.ManyToManyField(blank=True, to="api.situationalclip")),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="StrategyComment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("content", models.TextField()),
                ("likes_count", models.PositiveIntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "strategy",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comments",
                        to="api.communitystrategy",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "ordering": ["created_at"],
            },
        ),
        migrations.CreateModel(
            name="UniversalConcept",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("formation_families", "Formation Families"),
                            ("strategic_concepts", "Strategic Concepts"),
                            ("defensive_schemes", "Defensive Schemes"),
                            ("situational_contexts", "Situational Contexts"),
                        ],
                        max_length=30,
                    ),
                ),
                ("core_principle", models.TextField(help_text="Game-agnostic core principle")),
                (
                    "effectiveness_rating",
                    models.FloatField(
                        help_text="Cross-game effectiveness (0.0-1.0)",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["category", "name"],
            },
        ),
        migrations.CreateModel(
            name="TournamentPrep",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("tournament_name", models.CharField(max_length=200)),
                ("tournament_date", models.DateField()),
                (
                    "game",
                    models.CharField(
                        choices=[
                            ("madden_25", "Madden NFL 25"),
                            ("cfb_25", "College Football 25"),
                            ("madden_26", "Madden NFL 26"),
                            ("cfb_26", "College Football 26"),
                        ],
                        max_length=20,
                    ),
                ),
                ("primary_opponent", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "potential_opponents",
                    models.JSONField(default=list, help_text="List of potential opponents"),
                ),
                (
                    "opponent_analyses",
                    models.JSONField(default=dict, help_text="Analysis for each opponent"),
                ),
                (
                    "practice_sessions",
                    models.JSONField(default=list, help_text="Planned practice sessions"),
                ),
                (
                    "key_strategies",
                    models.JSONField(default=dict, help_text="Key strategies to practice"),
                ),
                (
                    "strategy_sources",
                    models.JSONField(default=dict, help_text="Strategies adapted from other games"),
                ),
                (
                    "preparation_progress",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(100.0),
                        ],
                    ),
                ),
                (
                    "confidence_level",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(10.0),
                        ],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("gameplans", models.ManyToManyField(blank=True, to="api.gameplan")),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tournament_preps",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "universal_concepts_to_practice",
                    models.ManyToManyField(blank=True, to="api.universalconcept"),
                ),
            ],
            options={
                "ordering": ["tournament_date"],
            },
        ),
        migrations.AddField(
            model_name="situationalclip",
            name="universal_concepts",
            field=models.ManyToManyField(blank=True, to="api.universalconcept"),
        ),
        migrations.AddField(
            model_name="gameplan",
            name="universal_concepts",
            field=models.ManyToManyField(blank=True, to="api.universalconcept"),
        ),
        migrations.AddField(
            model_name="communitystrategy",
            name="universal_concept",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="api.universalconcept",
            ),
        ),
        migrations.CreateModel(
            name="VideoAnalysis",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("video_file", models.FileField(upload_to="videos/%Y/%m/%d/")),
                ("video_filename", models.CharField(max_length=255)),
                ("video_duration", models.FloatField(help_text="Duration in seconds")),
                (
                    "game_detected",
                    models.CharField(
                        choices=[
                            ("madden_25", "Madden NFL 25"),
                            ("cfb_25", "College Football 25"),
                            ("madden_26", "Madden NFL 26"),
                            ("cfb_26", "College Football 26"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "analysis_context",
                    models.CharField(
                        choices=[
                            ("my_gameplay", "My Gameplay"),
                            ("studying_opponent", "Studying Opponent"),
                            ("learning_from_pros", "Learning from Pros"),
                            ("tournament_prep", "Tournament Preparation"),
                        ],
                        default="my_gameplay",
                        max_length=30,
                    ),
                ),
                ("opponent_username", models.CharField(blank=True, max_length=100, null=True)),
                ("total_situations_detected", models.PositiveIntegerField(default=0)),
                ("key_moments_count", models.PositiveIntegerField(default=0)),
                (
                    "analysis_confidence",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ]
                    ),
                ),
                (
                    "overall_performance_score",
                    models.FloatField(blank=True, help_text="Average performance score", null=True),
                ),
                (
                    "performance_tier_distribution",
                    models.JSONField(default=dict, help_text="Distribution across 7 tiers"),
                ),
                (
                    "hardware_tier_used",
                    models.CharField(
                        choices=[
                            ("ultra_low", "Ultra Low"),
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("ultra", "Ultra"),
                        ],
                        max_length=20,
                    ),
                ),
                ("processing_time", models.FloatField(help_text="Processing time in seconds")),
                ("memory_usage_mb", models.FloatField(blank=True, null=True)),
                (
                    "cross_game_insights",
                    models.JSONField(default=dict, help_text="Cross-game strategy insights"),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("queued", "Queued"),
                        ],
                        default="queued",
                        max_length=20,
                    ),
                ),
                ("error_message", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "universal_concepts_detected",
                    models.ManyToManyField(blank=True, to="api.universalconcept"),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="video_analyses",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddField(
            model_name="situationalclip",
            name="video_analysis",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="clips",
                to="api.videoanalysis",
            ),
        ),
        migrations.AddField(
            model_name="gameplan",
            name="source_analyses",
            field=models.ManyToManyField(
                blank=True, help_text="Source video analyses", to="api.videoanalysis"
            ),
        ),
        migrations.CreateModel(
            name="PerformanceTracking",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("session_date", models.DateField()),
                (
                    "game",
                    models.CharField(
                        choices=[
                            ("madden_25", "Madden NFL 25"),
                            ("cfb_25", "College Football 25"),
                            ("madden_26", "Madden NFL 26"),
                            ("cfb_26", "College Football 26"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "session_type",
                    models.CharField(
                        choices=[
                            ("practice", "Practice"),
                            ("ranked", "Ranked Match"),
                            ("tournament", "Tournament"),
                            ("casual", "Casual"),
                        ],
                        max_length=30,
                    ),
                ),
                ("total_plays_analyzed", models.PositiveIntegerField()),
                ("average_performance_score", models.FloatField()),
                (
                    "tier_distribution",
                    models.JSONField(
                        default=dict, help_text="Distribution across 7 performance tiers"
                    ),
                ),
                ("third_down_conversion_rate", models.FloatField(blank=True, null=True)),
                ("red_zone_efficiency", models.FloatField(blank=True, null=True)),
                ("two_minute_drill_success", models.FloatField(blank=True, null=True)),
                (
                    "vs_pro_benchmarks",
                    models.JSONField(
                        default=dict, help_text="Performance vs professional benchmarks"
                    ),
                ),
                (
                    "improvement_areas",
                    models.JSONField(default=list, help_text="Identified improvement areas"),
                ),
                (
                    "transferable_skills",
                    models.JSONField(default=dict, help_text="Skills that transfer between games"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="performance_tracking",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-session_date"],
                "unique_together": {("user", "session_date", "game", "session_type")},
            },
        ),
        migrations.CreateModel(
            name="GameSpecificImplementation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "game",
                    models.CharField(
                        choices=[
                            ("madden_25", "Madden NFL 25"),
                            ("cfb_25", "College Football 25"),
                            ("madden_26", "Madden NFL 26"),
                            ("cfb_26", "College Football 26"),
                        ],
                        max_length=20,
                    ),
                ),
                ("implementation_name", models.CharField(max_length=100)),
                ("formation_code", models.CharField(blank=True, max_length=50, null=True)),
                ("playbook_location", models.CharField(blank=True, max_length=200, null=True)),
                (
                    "success_rate",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "pro_usage_frequency",
                    models.FloatField(
                        blank=True, help_text="Professional usage frequency", null=True
                    ),
                ),
                (
                    "pro_success_rate",
                    models.FloatField(blank=True, help_text="Professional success rate", null=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "universal_concept",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="implementations",
                        to="api.universalconcept",
                    ),
                ),
            ],
            options={
                "ordering": ["game", "implementation_name"],
                "unique_together": {("universal_concept", "game")},
            },
        ),
    ]
