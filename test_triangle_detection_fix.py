#!/usr/bin/env python3\n\"\"\"\nTest the triangle detection fix specifically for Clip 6.\nVerify that YOLO detects triangles and the system properly analyzes their direction.\n\"\"\"\n\nimport os\nimport sys\nimport cv2\nimport numpy as np\nimport logging\nfrom pathlib import Path\n\n# Add project root to path\nproject_root = Path(__file__).parent\nsys.path.insert(0, str(project_root))\n\nfrom src.spygate.ml.enhanced_game_analyzer import EnhancedGameAnalyzer\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\nlogger = logging.getLogger(__name__)\n\ndef test_triangle_detection_for_clip6():\n    \"\"\"Test triangle detection specifically for Clip 6 (Possession Change).\"\"\"\n    \n    print(\"üîç Testing Triangle Detection Fix for Clip 6\")\n    print(\"=\" * 50)\n    \n    # Initialize analyzer\n    print(\"üîß Initializing analyzer...\")\n    try:\n        analyzer = EnhancedGameAnalyzer()\n        print(\"‚úÖ Analyzer initialized successfully\")\n    except Exception as e:\n        print(f\"‚ùå Failed to initialize analyzer: {e}\")\n        return\n    \n    # Load the video\n    video_path = \"1 min 30 test clip.mp4\"\n    print(f\"üìπ Loading video: {video_path}\")\n    \n    if not os.path.exists(video_path):\n        print(f\"‚ùå Video file not found: {video_path}\")\n        return\n    \n    try:\n        cap = cv2.VideoCapture(video_path)\n        fps = cap.get(cv2.CAP_PROP_FPS)\n        print(f\"‚úÖ Video loaded successfully, FPS: {fps}\")\n    except Exception as e:\n        print(f\"‚ùå Failed to open video: {e}\")\n        return\n    \n    # Clip 6: Possession Change (55.0-58.0s)\n    start_time = 55.0\n    end_time = 58.0\n    \n    start_frame = int(start_time * fps)\n    end_frame = int(end_time * fps)\n    \n    print(f\"üìπ Analyzing Clip 6: {start_time}s - {end_time}s\")\n    print(f\"üé¨ Frames: {start_frame} - {end_frame} (FPS: {fps})\")\n    print()\n    \n    # Test multiple frames from Clip 6\n    test_frames = [\n        start_frame + 30,  # 55.5s\n        start_frame + 60,  # 56.0s  \n        start_frame + 90,  # 56.5s\n        start_frame + 120, # 57.0s\n        start_frame + 150  # 57.5s\n    ]\n    \n    triangle_detections = {\n        \"possession_detected\": 0,\n        \"territory_detected\": 0,\n        \"total_frames\": len(test_frames),\n        \"possession_directions\": [],\n        \"territory_directions\": [],\n        \"game_state_data\": []\n    }\n    \n    for i, frame_num in enumerate(test_frames):\n        frame_time = frame_num / fps\n        print(f\"üîç Testing Frame {i+1}: {frame_num} ({frame_time:.1f}s)\")\n        print(\"-\" * 40)\n        \n        # Seek to frame\n        cap.set(cv2.CAP_PROP_POS_FRAMES, frame_num)\n        ret, frame = cap.read()\n        \n        if not ret:\n            print(f\"‚ùå Could not read frame {frame_num}\")\n            continue\n        \n        print(f\"‚úÖ Frame read successfully: {frame.shape}\")\n        \n        # Analyze frame\n        print(\"üß† Analyzing frame...\")\n        try:\n            game_state = analyzer.analyze_frame(frame)\n            print(\"‚úÖ Frame analysis completed\")\n        except Exception as e:\n            print(f\"‚ùå Frame analysis failed: {e}\")\n            continue\n        \n        # Check what was detected\n        print(f\"üìä Detection Results:\")\n        print(f\"   Possession Team: {game_state.possession_team}\")\n        print(f\"   Territory: {game_state.territory}\")\n        print(f\"   Down & Distance: {game_state.down} & {game_state.distance}\")\n        print(f\"   Confidence: {game_state.confidence:.3f}\")\n        \n        # Track detections\n        if game_state.possession_team and game_state.possession_team != \"unknown\":\n            triangle_detections[\"possession_detected\"] += 1\n            triangle_detections[\"possession_directions\"].append(game_state.possession_team)\n            \n        if game_state.territory and game_state.territory != \"unknown\":\n            triangle_detections[\"territory_detected\"] += 1\n            triangle_detections[\"territory_directions\"].append(game_state.territory)\n        \n        # Check if game_state dict was populated for hybrid logic\n        if hasattr(analyzer, 'game_state'):\n            print(f\"\\nüß† Hybrid Logic Data Available:\")\n            print(f\"   Game State Keys: {list(analyzer.game_state.keys())}\")\n            \n            if 'possession' in analyzer.game_state:\n                poss_data = analyzer.game_state['possession']\n                print(f\"   Possession Data: {poss_data}\")\n                triangle_detections[\"game_state_data\"].append({\n                    \"frame\": frame_num,\n                    \"possession\": poss_data\n                })\n                \n            if 'territory' in analyzer.game_state:\n                terr_data = analyzer.game_state['territory']\n                print(f\"   Territory Data: {terr_data}\")\n                if len(triangle_detections[\"game_state_data\"]) > 0:\n                    triangle_detections[\"game_state_data\"][-1][\"territory\"] = terr_data\n                else:\n                    triangle_detections[\"game_state_data\"].append({\n                        \"frame\": frame_num,\n                        \"territory\": terr_data\n                    })\n        else:\n            print(f\"\\n‚ùå No hybrid logic data available\")\n        \n        print()\n    \n    cap.release()\n    \n    # Summary\n    print(\"\\n\" + \"=\" * 60)\n    print(\"üéØ TRIANGLE DETECTION SUMMARY\")\n    print(\"=\" * 60)\n    \n    total_frames = triangle_detections[\"total_frames\"]\n    poss_detected = triangle_detections[\"possession_detected\"]\n    terr_detected = triangle_detections[\"territory_detected\"]\n    \n    print(f\"üìä Detection Statistics:\")\n    print(f\"   Total frames tested: {total_frames}\")\n    print(f\"   Possession detections: {poss_detected}/{total_frames} ({poss_detected/total_frames*100:.1f}%)\")\n    print(f\"   Territory detections: {terr_detected}/{total_frames} ({terr_detected/total_frames*100:.1f}%)\")\n    \n    if triangle_detections[\"possession_directions\"]:\n        print(f\"\\nüîÑ Possession Directions Detected:\")\n        for direction in set(triangle_detections[\"possession_directions\"]):\n            count = triangle_detections[\"possession_directions\"].count(direction)\n            print(f\"   {direction}: {count} times\")\n    \n    if triangle_detections[\"territory_directions\"]:\n        print(f\"\\nüó∫Ô∏è Territory Contexts Detected:\")\n        for direction in set(triangle_detections[\"territory_directions\"]):\n            count = triangle_detections[\"territory_directions\"].count(direction)\n            print(f\"   {direction}: {count} times\")\n    \n    if triangle_detections[\"game_state_data\"]:\n        print(f\"\\nüß† Hybrid Logic Integration:\")\n        for data in triangle_detections[\"game_state_data\"]:\n            frame_time = data[\"frame\"] / fps\n            print(f\"   Frame {data['frame']} ({frame_time:.1f}s):\")\n            if \"possession\" in data:\n                print(f\"     Possession: {data['possession']}\")\n            if \"territory\" in data:\n                print(f\"     Territory: {data['territory']}\")\n    \n    # Assessment\n    print(f\"\\nüéØ ASSESSMENT:\")\n    if poss_detected > 0 or terr_detected > 0:\n        print(f\"‚úÖ Triangle detection is WORKING!\")\n        print(f\"   - YOLO is detecting triangle regions\")\n        print(f\"   - Triangle direction analysis is functioning\")\n        print(f\"   - Game state integration is active\")\n        \n        if poss_detected > 0 and terr_detected > 0:\n            print(f\"üéØ EXCELLENT: Both possession and territory triangles detected!\")\n        elif poss_detected > 0:\n            print(f\"‚ö†Ô∏è PARTIAL: Only possession triangles detected\")\n        elif terr_detected > 0:\n            print(f\"‚ö†Ô∏è PARTIAL: Only territory triangles detected\")\n            \n        print(f\"\\nüîß This means the hybrid logic system now has access to:\")\n        if poss_detected > 0:\n            print(f\"   ‚úÖ Possession Team information\")\n        if terr_detected > 0:\n            print(f\"   ‚úÖ Territory Context information\")\n        print(f\"   ‚úÖ Historical Game State (already working)\")\n        print(f\"   ‚ùå Yard Line (still needs HUD extraction)\")\n        print(f\"   ‚ùå Game Context (quarter/time still needs HUD extraction)\")\n        \n    else:\n        print(f\"‚ùå Triangle detection still not working\")\n        print(f\"   - YOLO may not be detecting triangle regions\")\n        print(f\"   - Or triangle direction analysis is failing\")\n        print(f\"   - Check YOLO model and triangle analysis logic\")\n    \n    print(f\"\\n‚úÖ Triangle detection test completed!\")\n\nif __name__ == \"__main__\":\n    try:\n        test_triangle_detection_for_clip6()\n    except Exception as e:\n        print(f\"‚ùå Test failed with exception: {e}\")\n        import traceback\n        traceback.print_exc()
